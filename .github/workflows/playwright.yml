# 工作流程名稱
name: Playwright Tests
# 觸發條件
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# 工作
jobs:

  # 第一個工作：設置並運行測試
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_USER_OAUTH_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
    steps:
    - name: Checkout 🛎
      uses: actions/checkout@v3

    - name: Setup Node.js 📦
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: yarn install 📦
      run: yarn install

    - name: Run Playwright Tests  🧪
      uses: docker://mcr.microsoft.com/playwright:v1.44.0-jammy
      env:
        HOME: /root # required for playwright to run in container
      with:
          args: yarn test
      
    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        STATUS=$(cat ./summary.json | jq -r '.status')
        echo "STATUS=$STATUS" >> $GITHUB_ENV 
        PASSED=$(cat ./summary.json | jq -r '.passed[]' | tr '\n' ' ')
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        TIMEOUT=$(cat ./summary.json | jq -r '.timedOut[]' | tr '\n' ' ' | sed 's/ /--->TIMEOUT /g')
        FAILURES=$(cat ./summary.json | jq -r '.failed[]' | tr '\n' ' ')
        FAILURES+=$TIMEOUT
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV

    - name: Git Action Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Playwright Test Report
        path: "**/junit.xml"
        reporter: java-junit
        fail-on-error: 'false'

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 10

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: summary-report
        path: "**/summary.json"
        retention-days: 10

  # 第二個工作：合併報告並上傳
  publish_html_report:
    name: Publish HTML Report
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    env: 
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      SLACK_BOT_USER_OAUTH_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_TOKEN }}

    outputs:
        timestamp: ${{ steps.timestampid.outputs.timestamp }}

    steps:
    - name: Set a timestamp 
      id: timestampid
    # this will store current time with UTC in outputs. timestamp (eg of value: 20231028_233147Z)
      run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT"

    - name: Checkout 🛎
      uses: actions/checkout@v3

    - name: Setup Node.js 📦
      uses: actions/setup-node@v3
      with:
        node-version: 20

    # we now download the reports uploaded previously to merge them and create one single html report
    - name: Download reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        name: playwright-report # name of the file stored as artifact (as uploaded at the previous job)
        path: playwright-report/

    - name: Download summary
      uses: actions/download-artifact@v4
      with:
        name: summary-report # name of the file stored as artifact (as uploaded at the previous job)
        path: summary-report/
        
    - name: Display structure of downloaded files
      run: ls -R

    - name: /[OPTIONAL] Upload full html report to artifacts for history
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ steps.timestampid.outputs.timestamp }} # name of the file you want to have once its uploaded
        path: playwright-report # path where the reports are, from where to take the files
        retention-days: 5

    - name: Push the new files to github pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./playwright-report # from what folder to take files. It takes only contents
        destination_dir: ${{ steps.timestampid.outputs.timestamp }} # a sub-directory where to publish to avoid overwriting other reports
  
    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        STATUS=$(cat ./summary.json | jq -r '.status')
        echo "STATUS=$STATUS" >> $GITHUB_ENV 
        PASSED=$(cat ./summary.json | jq -r '.passed[]' | tr '\n' ' ')
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        TIMEOUT=$(cat ./summary.json | jq -r '.timedOut[]' | tr '\n' ' ' | sed 's/ /--->TIMEOUT /g')
        FAILURES=$(cat ./summary.json | jq -r '.failed[]' | tr '\n' ' ')
        FAILURES+=$TIMEOUT
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV

    - name: Write URL in summary
      run: 
        echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/playwright-githubpage/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY
        URL=`https://${{ github.repository_owner }}.github.io/playwright-githubpage/${{ steps.timestampid.outputs.timestamp }}/`
        echo "URL=$URL" $GITHUB_ENV
    
    - name: Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: repo,eventName,workflow,job,took
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
              title: `Playwright Demo Automation Results :test_tube:`,
              fields: [
              {
                title: 'Repo',
                value: `${process.env.AS_REPO}`,
                short: true
              },
              {
                title: 'Workflow',
                value: `${process.env.AS_WORKFLOW}`,
                short: true
              },
              {
                title: 'Total Tests',
                value: (`${{ env.FAILURES }}`.match(/.spec.ts/g) || []).length + (`${{ env.PASSED }}`.match(/.spec.ts/g) || []).length,
                short: true
              },
              {
                title: 'Pull Request',
                value: `${{ env.PULL_REQUEST_URL }}`,
                short: false
              },
              {
                title: 'Failures',
                value: `${{ env.FAILURES }}` === '' ? 'No failures' : `${{ env.FAILURES }}`.match(/.spec.ts/g).length > 10 ? `Too many failures to print. Please go to GitHub to see full list of failures` : '```${{ env.FAILURES }}```'.replace(/ /g, '\n'),
                short: false
              },
              {
                title: 'HTML Report',
                vlalue: `${{env.URL}}`,
                short: true
              }]
            }]
          }